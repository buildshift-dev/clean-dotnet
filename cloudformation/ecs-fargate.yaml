AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Fargate service for .NET Clean Architecture API'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: dev
  
  ApplicationName:
    Description: Application name
    Type: String
    Default: cleanarch

  ImageURI:
    Description: ECR image URI to deploy
    Type: String

  DesiredCount:
    Description: Number of tasks to run
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 10

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${EnvironmentName}-${ApplicationName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-${ApplicationName}-cluster'
        - Key: Environment
          Value: !Ref EnvironmentName

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${EnvironmentName}-${ApplicationName}'
      RetentionInDays: 14

  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${ApplicationName}-task-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # ECS Task Role (for the application itself)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-${ApplicationName}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LogGroup.Arn

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-${ApplicationName}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${EnvironmentName}-${ApplicationName}-container'
          Image: !Ref ImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
              Name: dotnet-api
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: ASPNETCORE_URLS
              Value: http://+:8080
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:8080/health || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${EnvironmentName}-${ApplicationName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-ECSSecurityGroup'
          Subnets:
            - !Select 
              - 0
              - !Split 
                - ","
                - Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-PrivateSubnets'
            - !Select 
              - 1
              - !Split 
                - ","
                - Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-PrivateSubnets'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn:
            Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-APITargetGroup'
          ContainerName: !Sub '${EnvironmentName}-${ApplicationName}-container'
          ContainerPort: 8080
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-${ApplicationName}-service'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Auto Scaling Target
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 'service/${ECSCluster}/${ECSService.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - Scale Up
  AutoScalingPolicyUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${EnvironmentName}-${ApplicationName}-scale-up'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  # Auto Scaling Policy - Scale Down
  AutoScalingPolicyDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${EnvironmentName}-${ApplicationName}-scale-down'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 300
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  # CloudWatch Alarms for Auto Scaling
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${EnvironmentName}-${ApplicationName}-cpu-high'
      AlarmDescription: 'Scale up on high CPU usage'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${EnvironmentName}-${ApplicationName}-service'
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref AutoScalingPolicyUp

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${EnvironmentName}-${ApplicationName}-cpu-low'
      AlarmDescription: 'Scale down on low CPU usage'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 5
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ServiceName
          Value: !Sub '${EnvironmentName}-${ApplicationName}-service'
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref AutoScalingPolicyDown

Outputs:
  ECSCluster:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-ECSCluster'

  ECSService:
    Description: ECS Service Name
    Value: !Sub '${EnvironmentName}-${ApplicationName}-service'
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-ECSService'

  TaskDefinition:
    Description: ECS Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-TaskDefinition'

  APIURL:
    Description: .NET API URL
    Value: !Sub
      - 'http://${ALBDNSName}/'
      - ALBDNSName:
          Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-ALB-DNS'
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-API-URL'

  SwaggerURL:
    Description: Swagger UI URL
    Value: !Sub
      - 'http://${ALBDNSName}/'
      - ALBDNSName:
          Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-ALB-DNS'
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-Swagger-URL'

  HealthCheckURL:
    Description: Health Check URL
    Value: !Sub
      - 'http://${ALBDNSName}/health'
      - ALBDNSName:
          Fn::ImportValue: !Sub '${EnvironmentName}-${ApplicationName}-ALB-DNS'
    Export:
      Name: !Sub '${EnvironmentName}-${ApplicationName}-Health-URL'